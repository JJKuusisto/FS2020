{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"kNAWeA,EAVF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACbC,EAAQF,EAAKG,UACf,qBAAuB,iBACzB,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCK7BK,EAXM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACrB,OAAa,OAAVA,EACM,KAIP,yBAAKJ,UAAU,SACZI,I,gBCgBQ,EArBA,WACb,IAAMC,EAAUC,IAAMC,IAHR,cAINC,EAAc,CACpBC,GAAI,IACJR,QAAS,mCACTS,KAAM,2BACNX,WAAW,GAEb,OAAOM,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAaxC,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KAdR,aAcsBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAnBF,aAmBE,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC4D5BK,EA7EH,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACVC,EADU,KACHC,EADG,OAEaF,mBAAS,cAFtB,mBAEVG,EAFU,KAEDC,EAFC,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIuBN,mBAAS,MAJhC,mBAIVO,EAJU,KAIIC,EAJJ,KAMhBC,qBAAU,WACRC,IAEGlB,MAAK,SAAAmB,GACJT,EAASS,QAEZ,IAEH,IAqCMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAApC,GAAI,OAAuB,IAAnBA,EAAKG,aAE9B,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcK,QAASsB,IACvB,6BACE,4BAAQxB,QAAS,kBAAMuB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGO,EAAYE,KAAI,SAACrC,EAAMsC,GAAP,OACjB,kBAAC,EAAD,CAAMC,IAAKD,EAAGtC,KAAMA,EAAMC,iBAAkB,kBApDvB,SAACY,GAC1B,IAAMb,EAAOwB,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAE5B,KAAOA,KAChC6B,EAAW,2BAAO1C,GAAP,IAAaG,WAAYH,EAAKG,YAE/C8B,EACUpB,EAAI6B,GACX3B,MAAK,SAAA4B,GACJlB,EAASD,EAAMa,KAAI,SAAArC,GAAI,OAAIA,EAAKa,KAAOA,EAAKb,EAAK2C,SAElDC,OAAM,SAAAC,GACLd,EAAgB,aAAD,OACF/B,EAAKK,QADH,sCAEfyC,YAAW,WACTf,EAAgB,QAChB,KACFN,EAASD,EAAMY,QAAO,SAAAK,GAAC,OAAIA,EAAE5B,KAAOA,SAqCckC,CAAmB/C,EAAKa,WAG5E,0BAAMmC,SArCK,SAACC,GAChBA,EAAMC,iBACJ,IAAMC,EAAa,CACjB9C,QAASqB,EACTZ,MAAM,IAAIsC,MAAOC,cACjBlD,UAAWmD,KAAKC,SAAW,IAE7BtB,EACUkB,GACPpC,MAAK,SAAA4B,GACJlB,EAASD,EAAMN,OAAOyB,IACtBhB,EAAW,SA2BZ,2BAAO6B,MAAO9B,EAAS+B,SAxBJ,SAACR,GACzBS,QAAQC,IAAIV,EAAMW,OAAOJ,OACzB7B,EAAWsB,EAAMW,OAAOJ,UAuBnB,4BAAQK,KAAK,UAAb,W,MCtEPC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.e2d16647.chunk.js","sourcesContent":["import React from 'react'\nconst Note = ({note, toggleImportance}) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n    return(\n      <li className='note'>\n        {note.content}\n        <button onClick={toggleImportance}>{label}</button>\n      </li>\n    )\n  }\nexport default Note\n","import React from 'react'\nconst Notification = ({message}) => {\n  if(message===null){\n    return null\n  }\n\n  return (\n    <div className='error'>\n      {message}\n    </div>\n  )\n}\nexport default Notification\n","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n    const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default {getAll, create, update}\n","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\nconst App = () => {\n\tconst [notes, setNotes] = useState([])\n\tconst [newNote, setNewNote] = useState('a new note')\n  const [showAll, setShowAll] = useState(true)\n\tconst [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() =>{\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const toggleImportanceOf = (id) =>{\n    const note = notes.find(n => n.id === id)\n    const changedNote ={ ...note, important: !note.important }\n    \n    noteService\n      .update(id, changedNote)\n      .then(returnedNote =>{\n        setNotes(notes.map(note => note.id !== id ? note:returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n        `the note '${note.content}' was already deleted from server`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        },5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\tconst addNote = (event) => {\n\t\tevent.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n\t}\n\tconst handleNoteChange = (event) => {\n\t\tconsole.log(event.target.value)\n\t\tsetNewNote(event.target.value)\n\t}\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) => \n        <Note key={i} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n\t      <input value={newNote} onChange={handleNoteChange} />\n\t      <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}